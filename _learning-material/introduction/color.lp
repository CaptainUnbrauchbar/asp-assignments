% We let constant 'n', which is 3 by default, stand for the number of colors.

#const n = 3.

% Based on 'n', we now represent the available colors by (auxiliary) facts,
% where '1..n' denotes a range of integers.

color(1..n).

% - TODO 1: Invoke the command
%   clingo color.lp
% to see the answer set providing the available colors.

% - TODO 2: Invoke the command
%   clingo color.lp --const n=5
% to see another answer set with more colors. (Guess beforehand how many ;-)

% - TODO 3: Now we start to combine this encoding with an instance, starting
% with the one in triangle.lp. So invoke the command
%   clingo color.lp triangle.lp
% and note that several files can be given to clingo and the number of colors
% is 3 again.

% - TODO 4: Let us also inspect the text output of clingo, using the command
%   clingo color.lp triangle.lp --text
% where the output gives an indication of the propositional (variable-free)
% rules internally generated by clingo before it does search for answer sets.

% The following choice rule expresses that any number of colors, i.e., none
% to all, can be assigned to each node.

{color(X,C)} :- node(X), color(C).

% - TODO 5: Uncomment the choice rule and invoke the command
%   clingo color.lp triangle.lp
% to see some answer set (the one found first by clingo) representing an
% assignment of arbitrary colors, i.e., none to all of them, to nodes.

% - TODO 6: Ask clingo for (up to) three answer sets by invoking the command
%   clingo color.lp triangle.lp 3
% Can you tell how many answer sets there are in total?

% - TODO 7: Let us check how many answer sets there are by invoking
%   clingo color.lp triangle.lp 0
% Investigate atoms of the predicate color/2 in the answer set found last.

% - TODO 8: Given that there are so many answer sets, compare the command
%   clingo color.lp triangle.lp 0 -q
% which suppresses the output of the answer sets, but reports a summary only.

% - TODO 9: Let us also have a look at more detailed statistics by invoking
%   clingo color.lp triangle.lp 0 -q --stats
% In particular, compare the number of "Models" to "Choices" and "Conflicts".

% The following integrity constraint with a #count aggregate in its body
% expresses that there should not be an answer set such that some node is
% assigned no or several colors.

:- node(X), #count{C : color(X,C)} != 1.

% - TODO 10: Uncomment the integrity constraint and invoke the command
%   clingo color.lp triangle.lp
% to see the answer set found first now. How many such answer sets exist?

% - TODO 11: Let us double-check the number of answer sets by running, e.g.,
%   clingo color.lp triangle.lp 0 -q --stats

% The following integrity constraint asserts the coloring condition that any
% pair of nodes connected by an edge must be colored differently.

:- edge(X,Y), color(X,C), color(Y,C).

% - TODO 12: Uncomment the integrity constraint and invoke the command
%   clingo color.lp triangle.lp
% once more. Can you tell the number of answer sets that represent colorings?

% The following #show directive tells that the output of answer sets should
% be projected to atoms of the predicate color/2.

#show color/2.

% - TODO 13: Uncomment the #show directive and inspect all colorings, using
%   clingo color.lp triangle.lp 0
% Also consider adding the option --stats to see the search statistics.

% - TODO 14: To compare the propositional rules generated by clingo, invoke
%   clingo color.lp triangle.lp --text
% and inspect the ground instances of the rules with variables written above.

% - TODO 15: Take a look at the graph in square.lp and invoke the command
%   clingo color.lp square.lp 0
% to see the colorings for a different graph, while using the same encoding.
